#pragma once

constexpr int radian							= 50;	//円の半径
const int titlePositionX						= 320;	//タイトル座標X
const int titlePositionY						= 333;	//タイトル座標Y
const int textPlayPositionX						= 871;	//プレイテキスト座標X
const int textPlayPositionY						= 550;	//プレイテキスト座標Y
const int textCreditsPositionX					= 806;	//クレジットテキスト座標X
const int textCreditsPositionY					= 800;	//クレジットテキスト座標Y
const int minimumEnterkeyPositionX				= 1600;	//エンターキー座標ｘ最小値
const int minimumEnterkeyPositionY				= 860;	//エンターキー座標ｙ最小値
const int maxEneterkeyPositionX					= 1687;	//エンターキー座標ｘ最大値
const int maxEneterkeyPositionY					= 965;	//エンターキー座標ｙ最大値
const int textDicidePositionX					= 1700;	//決定テキスト座標ｘ
const int textDicidePositionY					= 890;	//決定テキスト座標y
const int minimumUpdownkeyPositionX				= 1375;	//上下キーｘ座標最小値
const int minimumUpkeyPositionY					= 860;	//上キーy座標最小値
const int maxUpdownkeyPositionX					= 1425;	//上下キーｘ座標最大値
const int maxUpkeyPositionY						= 910;	//上キーy座標最大値
const int minimumDownkeyPositionY				= 912;	//下キーy座標最小値
const int maxDownkeyPositionY					= 962;	//下キーy座標最大値
const int textSelectPositionX					= 1437;	//選択テキスト座標ｘ
const int textSelectPositionY					= 890;	//選択テキスト座標ｙ
const int textElevationPositionX				= 75;	//標高テキスト座標ｘ
const int textElevationPositionY				= 20;	//標高テキスト座標y
const int textTimelimitPositionX				= 75;	//制限時間テキスト座標ｘ
const int textTimelimitPositionY				= 130;	//制限時間テキスト座標y
const int minimumPlayingkeyPositionY			= 975;	//プレイ中キーｙ座標最小値
const int maxPlayingkeyPositionY				= 1025;	//プレイ中キーｙ座標最大値
const int textPlayingkeyPositionY				= 975;	//プレイ中キーテキスト座標y
const int minimumControlkeyPositionX			= 1637;	//コントロールキーｘ座標最小値
const int maxControlkeyPositionX				= 1722;	//コントロールキーｘ座標最大値
const int textPausePositionX					= 1732;	//ポーズテキストｘ座標
const int minimumLeftkeyPositionX				= 1370;	//左キーｘ座標最小値
const int maxLeftkeyPositionX					= 1425;	//左キーｘ座標最大値
const int minimumRightkeyPositionX				= 1437;	//右キーｘ座標最小値
const int maxRightkeyPositionX					= 1492;	//右キーｘ座標最大値
const int textMovePositionX						= 1507;	//移動テキストｘ座標
const int minimumSpacekeyPositionX				= 1022;	//スペースキーｘ座標最小値
const int maxSpacekeyPositionX					= 1142;	//スペースキーｘ座標最大値
const int textJumpPositionX						= 1152;	//ジャンプテキストｘ座標
const int textHighjumpPositionX					= 641;	//跳躍テキストｘ座標
const int textHighjumpPositionY					= 50;	//跳躍テキストｙ座標
const int clearsceneTextPositionX				= 1175;	//クリアシーンテキストｘ座標
const int textClearsceneRetryPositionY			= 775;	//クリアシーンリトライテキストy座標
const int textClearsceneReturntotitlePositionY	= 875;	//クリアシーンタイトルへ戻るテキストｙ座標
const int textPauseScenePausePositionX			= 691;	//ポーズシーンポーズテキストｘ座標
const int textPauseScenePausePositionY			= 333;	//ポーズシーンポーズテキストy座標
const int textReturntoplayPositionX				= 511;	//プレイへ戻るテキストｘ座標
const int textReturntoplayPositionY				= 565;	//プレイへ戻るテキストy座標
const int textPausesceneRetryPositionX			= 791;	//ポーズシーンリトライテキストｘ座標
const int textPausesceneRetryPositionY			= 675;	//ポーズシーンリトライテキストy座標
const int textPausesceneReturntotitlePositionX	= 511;	//ポーズシーンタイトルへ戻るテキストｘ座標
const int textPausesceneReturntotitlePositionY	= 785;	//ポーズシーンタイトルへ戻るテキストy座標
const int textReadyPositionX					= 660;	//ready?テキストｘ座標
const int textReadyPositionY					= 440;	//ready?テキストy座標
const int textEntertostartPositionX				= 800;	//エンターでスタートテキストｘ座標
const int textEntertostartPositionY				= 665;	//エンターでスタートテキストy座標
const int maxBrinkCounter						= 60;	//最大点滅カウンター
const int textClearSceneElevationPositionX		= 1450;	//クリア画面標高テキストｘ座標
const int textClearSceneElevationPositionY		= 30;	//クリア画面標高テキストｙ座標
const int minimumUpGraphPositionX				= 1300;	//up画像最小値x
const int maxUpGraphPositionX					= 1500;	//up画像最大値x
const int minimumUpGraphPositionY				= 225;	//up画像最小値y
const int maxUpGraphPositionY					= 375;	//up画像最大値y
const int textGameTargetPositionX				= 550;	//ゲーム目標テキスト座標x
const int textGameTargetPositionY				= 275;	//ゲーム目標テキスト座標y
const VECTOR maxBirdGraphPosition				= VGet(150, 325, 0);	//最大鳥画像座標
const VECTOR minimumBirdGraphPosition			= VGet(100, 275, 0);	//最小鳥画像座標
const VECTOR maxRadarGraphPosition				= VGet(200, 370, 0);	//最大レーダー座標
const VECTOR minimumRadarGraphPosition			= VGet(50, 220, 0);		//最小レーダー座標
const VECTOR arrowPosition						= VGet(125, 295, 0);	//矢印座標
const float arrowScale							= 0.2f;	//矢印の大きさ
const int maxItemNumber							= 6;	//アイテム最大数
const VECTOR cupCakeNameText					= VGet(1050, 150, 0);	//アイテムの名前座標
const VECTOR rocketNameText						= VGet(1150, 150, 0);	
const VECTOR sandClockNameText					= VGet(1200, 150, 0);
const VECTOR shieldNameText						= VGet(1150, 150, 0);
const VECTOR ufoNameText						= VGet(1250, 150, 0);
const VECTOR wingNameText						= VGet(1150, 150, 0);
const VECTOR itemEffectText						= VGet(1025, 400, 0);	//アイテム交換文の座標
const VECTOR dictionaryCupCake					= VGet(-35, -25, 0);	//図鑑でのアイテムモデルの座標
const VECTOR dictionaryRocket					= VGet(-35, -10, 0);
const VECTOR dictionarySandClock				= VGet(-35, -15, 0);
const VECTOR dictionaryShield					= VGet(-40, 5, 0);
const VECTOR dictionaryUfo						= VGet(-35, -5, 0);
const VECTOR dictionaryWing						= VGet(-35, 5, 0);
const VECTOR textDictionary						= VGet(660, 685, 0);
const VECTOR textTutorial						= VGet(475, 60, 0);		//「チュートリアル」の座標
const VECTOR tutorialInstruction1				= VGet(0, 0, 0);		//チュートリアルの指示の座標
const VECTOR tutorialInstruction2				= VGet(0, 0, 0);
const VECTOR tutorialInstruction3				= VGet(0, 0, 0);
const VECTOR tutorialInstruction4				= VGet(0, 0, 0);
const VECTOR tutorialInstruction5				= VGet(0, 0, 0);
const float  emptyArrowWidth					= 100.0f;					//から矢印幅
const float	 emptyArrowHeight					= 150.0f;					//から矢印高さ
const VECTOR emptyArrowShift					= VGet(90.0f, -35.0f, 0.0f);//から矢印ずらし量
const float  chargeArrowWidth					= 80.0f;					//ため矢印幅
const float	 chargeArrowHeight					= 25.0f;					//ため矢印高さ
const VECTOR chargeArrowShift					= VGet(100.0f, 28.0f, 0.0f);//ためずらし量
const VECTOR shiftStaminaGraph					= VGet(150, 200, 0);		//スタミナ画像ずらし座標

class Player;
class SelectScene;
class Timer;
class Bird;
class Rocket;
class CupCake;
class Wing;
class Shield;
class UFO;
class SandClock;
class Routine;

class UI
{
public:
	UI();
	~UI();

	void drawTitleUI(SelectScene* selectScene);													//タイトルUI
	void drawPlayUI(Timer* timer, Player* player, int staminaRedGage, Bird* bird[]);			//プレイUI
	void drawClearUI(SelectScene* selectScene, Player* player);									//クリアUI
	void drawPauseUI(SelectScene* selectScene);													//ポーズUI
	void drawReadyUI();																			//ready?UI
	void finishUI_(Timer* timer);																//finishUI
	void explain3DItemUI_(int nameX, int nameY, const char* name, int nameColor, int nameFont,	//アイテム説明ui
		int itemModel, VECTOR itemPosition, int effectX, int effectY, const char* effect, int effectColor, int effectFont);
	void selectItem_();																			//アイテムを選ぶ
	void dictionaryUI();																		//アイテム図鑑ui
	void tutorialUI_(Player* player, Bird* bird[], Routine* routine);							//チュートリアルui

	int GetfontSize75_()const { return fontSize75_; }
	int GetfontSize40_()const { return fontSize40_; }
	int GetfontSize150_()const { return fontSize150_; }
	int GetfontSize125_()const { return fontSize125_; }
	int GetdictionaryGraph_()const { return dictionaryGraph_; }
	int GetitemNumber_()const { return itemNumber_; }

private:
	int		fontSize100_;						//フォントサイズ100
	int		fontSize150_;						//フォントサイズ150
	int		fontSize75_;						//フォントサイズ75
	int		fontSize125_;						//フォントサイズ125
	int		fontSize40_;						//フォントサイズ40
	int		fontSize200_;						//フォントサイズ200
	int		enterkeyGraph_;						//エンターキー画像
	int		spacekeyGraph_;						//スペースキー画像
	int		controlkeyGraph_;					//コントロールキー画像
	int		rightkeyGraph_;						//右キー画像
	int		leftkeyGraph_;						//左キー画像
	int		upkeyGraph_;						//上キー画像
	int		downkeyGraph_;						//下キー画像
	int		brinkCounter_= 0;					//点滅カウンター
	int		staminaGraph_;						//スタミナ画像
	int		upGraph_;							//up画像
	double	angle_;								//回転角度
	float	distance_[100];						//距離
	int		radarGraph_;						//レーダー画像
	int		arrowGraph_;						//矢印画像
	int		birdGraph_;							//鳥画像
	int		shortest_;							//最も短い
	int		dictionaryGraph_;					//辞書画像
	bool	isPrevRightAndLeftKey_;				//左右キーの長押し防ぐ
	int		itemNumber_;						//アイテムナンバー
	float	rad_;								//上下に動かすよう変数
	int		flipSound_;							//めくる音
	int		staminaRedGage_;					//赤スタミナ
	float	rota_;								//回転
	int		chargeArrow_[5];					//チャージ用矢印
	int		trampleonGraph_;					//踏みつけ
	int		emptyChargeGage_;					//からのチャージゲージ
	
	void radar_(Player* player, Bird* bird[]);	//レーダー
	void chargeGage_(Player* player);			//チャージゲージ
};
